#pragma once
#include "tas5825p.h"

// From 2024-01-30

// This configuration needs to be loaded before setting the coefficients
const tas5825p_cfg_reg_t tas5825p_bass_preconfig[] = {
	{ 0x00, 0x00 },
	{ 0x7f, 0xaa },
	{ 0x00, 0x03 },
};

// Set Biquad coefficients for bass boost
// (BQ15 Reg. 0x58 .. 0x5C .. 0x60 .. 0x64 .. 0x68)

const tas5825p_cfg_reg_t tas5825p_bass_plus_6db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x12, 0x81 },
	{ 0xde, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xc8, 0x4d },
	{ 0x4b, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_plus_5db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x0e, 0x78 },
	{ 0xf0, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xcc, 0x56 },
	{ 0x39, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_plus_4db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x0a, 0xe0 },
	{ 0x56, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xcf, 0xee },
	{ 0xd3, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_plus_3db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x07, 0xab },
	{ 0xda, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xd3, 0x23 },
	{ 0x4f, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_plus_2db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x04, 0xd0 },
	{ 0x98, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xd5, 0xfe },
	{ 0x91, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_plus_1db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x02, 0x44 },
	{ 0xdc, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xd8, 0x8a },
	{ 0x4d, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_0db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x08 },
	{ 0x00, 0x00 },
	{ 0x00, 0xf0 },
	{ 0x25, 0x5c },
	{ 0x76, 0x07 },
	{ 0xda, 0xcf },
	{ 0x29, 0x0f },
	{ 0xda, 0xa3 },
	{ 0x8a, 0xf8 },
	{ 0x25, 0x30 },
	{ 0xd7, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_1db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xfd, 0xbb },
	{ 0xc9, 0xf0 },
	{ 0x29, 0xda },
	{ 0x4f, 0x07 },
	{ 0xd8, 0x95 },
	{ 0x7b, 0x0f },
	{ 0xd6, 0x25 },
	{ 0xb1, 0xf8 },
	{ 0x29, 0xae },
	{ 0xbd, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_2db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xfb, 0x32 },
	{ 0x4c, 0xf0 },
	{ 0x2e, 0xe1 },
	{ 0x6f, 0x07 },
	{ 0xd6, 0x17 },
	{ 0xca, 0x0f },
	{ 0xd1, 0x1e },
	{ 0x91, 0xf8 },
	{ 0x2e, 0xb5 },
	{ 0xea, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_3db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xf8, 0x5b },
	{ 0x7a, 0xf0 },
	{ 0x34, 0x81 },
	{ 0xd0, 0x07 },
	{ 0xd3, 0x4e },
	{ 0x2a, 0x0f },
	{ 0xcb, 0x7e },
	{ 0x30, 0xf8 },
	{ 0x34, 0x56 },
	{ 0x5c, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_4db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xf5, 0x2e },
	{ 0x5f, 0xf0 },
	{ 0x3a, 0xcd },
	{ 0x31, 0x07 },
	{ 0xd0, 0x2f },
	{ 0xd4, 0x0f },
	{ 0xc5, 0x32 },
	{ 0xcf, 0xf8 },
	{ 0x3a, 0xa1 },
	{ 0xcd, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_5db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xf1, 0xa1 },
	{ 0x0f, 0xf0 },
	{ 0x41, 0xd7 },
	{ 0x39, 0x07 },
	{ 0xcc, 0xb3 },
	{ 0x07, 0x0f },
	{ 0xbe, 0x28 },
	{ 0xc7, 0xf8 },
	{ 0x41, 0xab },
	{ 0xe9, 0x00 },
};

const tas5825p_cfg_reg_t tas5825p_bass_minus_6db_config[] = {
	{ CFG_META_BURST, 21 },
	{ 0x58, 0x07 },
	{ 0xed, 0xa8 },
	{ 0x91, 0xf0 },
	{ 0x49, 0xb5 },
	{ 0xac, 0x07 },
	{ 0xc8, 0xcc },
	{ 0xfe, 0x0f },
	{ 0xb6, 0x4a },
	{ 0x54, 0xf8 },
	{ 0x49, 0x8a },
	{ 0x72, 0x00 },
};

#define TAS5825P_BASS_PRECONFIG_SIZE (sizeof(tas5825p_bass_preconfig) / sizeof(tas5825p_bass_preconfig[0]))

// The bass configs are all the same size
#define TAS5825P_BASS_CONFIG_SIZE (sizeof(tas5825p_bass_plus_6db_config) / sizeof(tas5825p_bass_plus_6db_config[0]))